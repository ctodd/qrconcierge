AWSTemplateFormatVersion: '2010-09-09'
Description: 'Simplified CloudFormation template for deploying QR Code Generator web application'

Parameters:
  HostingStackName:
    Type: String
    Description: Name of the hosting stack that created the S3 bucket and CloudFront distribution
    Default: qrcode-generator-hosting
  
  SubdirectoryPath:
    Type: String
    Description: Subdirectory path where the application will be deployed
    Default: qrcode-generator
  
  ArtifactBucket:
    Type: String
    Description: S3 bucket containing the built application artifacts
    Default: ''
  
  ArtifactKey:
    Type: String
    Description: S3 key for the built application artifacts (ZIP file)
    Default: ''

Resources:
  # IAM role for the Lambda function
  DeploymentLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: S3Access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:DeleteObject
                  - s3:ListBucket
                Resource:
                  - !Sub 'arn:aws:s3:::${ArtifactBucket}/*'
                  - !Sub 'arn:aws:s3:::${ArtifactBucket}'
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:DeleteObject
                  - s3:ListBucket
                Resource:
                  - !Sub 'arn:aws:s3:::${WebsiteBucketName}/*'
                  - !Sub 'arn:aws:s3:::${WebsiteBucketName}'
              - Effect: Allow
                Action:
                  - cloudfront:CreateInvalidation
                Resource: !Sub 'arn:aws:cloudfront::${AWS::AccountId}:distribution/${CloudFrontDistId}'

  # Custom resource to copy files to the website bucket
  CopyFilesFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Role: !GetAtt DeploymentLambdaRole.Arn
      Runtime: nodejs18.x
      Timeout: 300
      MemorySize: 512
      Code:
        ZipFile: |
          const AWS = require('aws-sdk');
          const s3 = new AWS.S3();
          const cloudfront = new AWS.CloudFront();
          
          exports.handler = async (event, context) => {
            console.log('Event:', JSON.stringify(event));
            
            const sourceBucket = event.ResourceProperties.ArtifactBucket;
            const sourceKey = event.ResourceProperties.ArtifactKey;
            const targetBucket = event.ResourceProperties.WebsiteBucket;
            const subdirectory = event.ResourceProperties.Subdirectory;
            const cloudfrontDistId = event.ResourceProperties.CloudFrontDistributionId;
            
            if (event.RequestType === 'Delete') {
              console.log('Delete request - cleaning up');
              await sendResponse(event, context, 'SUCCESS');
              return;
            }
            
            if (event.RequestType === 'Create' || event.RequestType === 'Update') {
              try {
                // Copy the index.html file to the target bucket
                console.log(`Copying index.html from ${sourceBucket}/${sourceKey} to ${targetBucket}/${subdirectory}/index.html`);
                
                await s3.copyObject({
                  Bucket: targetBucket,
                  Key: `${subdirectory}/index.html`,
                  CopySource: `/${sourceBucket}/${sourceKey}`,
                  ContentType: 'text/html'
                }).promise();
                
                // Create CloudFront invalidation
                console.log('Creating CloudFront invalidation');
                await cloudfront.createInvalidation({
                  DistributionId: cloudfrontDistId,
                  InvalidationBatch: {
                    CallerReference: `deployment-${Date.now()}`,
                    Paths: {
                      Quantity: 1,
                      Items: [`/${subdirectory}/*`]
                    }
                  }
                }).promise();
                
                await sendResponse(event, context, 'SUCCESS');
              } catch (error) {
                console.error('Deployment failed:', error);
                await sendResponse(event, context, 'FAILED', error.message);
              }
            }
          };
          
          async function sendResponse(event, context, responseStatus, reason) {
            const responseBody = JSON.stringify({
              Status: responseStatus,
              Reason: reason || 'See CloudWatch logs for details',
              PhysicalResourceId: context.logStreamName,
              StackId: event.StackId,
              RequestId: event.RequestId,
              LogicalResourceId: event.LogicalResourceId
            });
            
            console.log('Sending response:', responseBody);
            
            const https = require('https');
            const url = require('url');
            const parsedUrl = url.parse(event.ResponseURL);
            
            const options = {
              hostname: parsedUrl.hostname,
              port: 443,
              path: parsedUrl.path,
              method: 'PUT',
              headers: {
                'Content-Type': '',
                'Content-Length': responseBody.length
              }
            };
            
            return new Promise((resolve, reject) => {
              const req = https.request(options, (res) => {
                console.log(`Response status code: ${res.statusCode}`);
                resolve();
              });
              
              req.on('error', (error) => {
                console.error('Error sending response:', error);
                reject(error);
              });
              
              req.write(responseBody);
              req.end();
            });
          }

  # Import values from the hosting stack
  WebsiteBucketName:
    Type: Custom::ImportValue
    Properties:
      ServiceToken: !GetAtt ImportValueFunction.Arn
      ExportName: !Sub '${HostingStackName}-WebsiteBucketName'

  CloudFrontDistId:
    Type: Custom::ImportValue
    Properties:
      ServiceToken: !GetAtt ImportValueFunction.Arn
      ExportName: !Sub '${HostingStackName}-CloudFrontDistributionId'

  CloudFrontDomainName:
    Type: Custom::ImportValue
    Properties:
      ServiceToken: !GetAtt ImportValueFunction.Arn
      ExportName: !Sub '${HostingStackName}-CloudFrontDomainName'

  # Function to import values
  ImportValueFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Role: !GetAtt DeploymentLambdaRole.Arn
      Runtime: nodejs18.x
      Timeout: 30
      Code:
        ZipFile: |
          const AWS = require('aws-sdk');
          const cloudformation = new AWS.CloudFormation();
          
          exports.handler = async (event, context) => {
            console.log('Event:', JSON.stringify(event));
            
            if (event.RequestType === 'Delete') {
              await sendResponse(event, context, 'SUCCESS');
              return;
            }
            
            try {
              const exportName = event.ResourceProperties.ExportName;
              console.log(`Importing value for ${exportName}`);
              
              const response = await cloudformation.listExports().promise();
              const exportValue = response.Exports.find(exp => exp.Name === exportName);
              
              if (!exportValue) {
                throw new Error(`Export ${exportName} not found`);
              }
              
              await sendResponse(event, context, 'SUCCESS', null, exportValue.Value);
            } catch (error) {
              console.error('Import failed:', error);
              await sendResponse(event, context, 'FAILED', error.message);
            }
          };
          
          async function sendResponse(event, context, responseStatus, reason, data) {
            const responseBody = JSON.stringify({
              Status: responseStatus,
              Reason: reason || 'See CloudWatch logs for details',
              PhysicalResourceId: context.logStreamName,
              StackId: event.StackId,
              RequestId: event.RequestId,
              LogicalResourceId: event.LogicalResourceId,
              Data: { Value: data }
            });
            
            console.log('Sending response:', responseBody);
            
            const https = require('https');
            const url = require('url');
            const parsedUrl = url.parse(event.ResponseURL);
            
            const options = {
              hostname: parsedUrl.hostname,
              port: 443,
              path: parsedUrl.path,
              method: 'PUT',
              headers: {
                'Content-Type': '',
                'Content-Length': responseBody.length
              }
            };
            
            return new Promise((resolve, reject) => {
              const req = https.request(options, (res) => {
                console.log(`Response status code: ${res.statusCode}`);
                resolve();
              });
              
              req.on('error', (error) => {
                console.error('Error sending response:', error);
                reject(error);
              });
              
              req.write(responseBody);
              req.end();
            });
          }

  # Custom resource to trigger the deployment
  DeploymentResource:
    Type: Custom::Deployment
    Properties:
      ServiceToken: !GetAtt CopyFilesFunction.Arn
      ArtifactBucket: !Ref ArtifactBucket
      ArtifactKey: !Ref ArtifactKey
      WebsiteBucket: !GetAtt WebsiteBucketName.Value
      Subdirectory: !Ref SubdirectoryPath
      CloudFrontDistributionId: !GetAtt CloudFrontDistId.Value

Outputs:
  ApplicationURL:
    Description: URL to access the deployed application
    Value: !Sub 'https://${CloudFrontDomainName.Value}/${SubdirectoryPath}/'
